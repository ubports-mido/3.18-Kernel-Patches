From 4096bd3d8de046b1c8d33727ecb45786fff51a5f Mon Sep 17 00:00:00 2001
From: John Johansen <john.johansen@canonical.com>
Date: Wed, 10 Jun 2015 02:33:15 -0700
Subject: [PATCH 03/10] Apparmor: mediated_filesystem() should use dentry->d_sb
 not inode->i_sb

mediated_filesystem() should use dentry->d_sb not dentry->d_inode->i_sb and
should avoid file_inode() also since it is really dealing with the path.

Signed-off-by: David Howells <dhowells@redhat.com>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

(port of commit 7ac2856d99e8038d356767c81ef7f2e85d366441)
Signed-off-by: John Johansen <john.johansen@canonical.com>
Signed-off-by: BirdZhang <0312birdzhang@gmail.com>
---
 security/apparmor/file.c             |  2 +-
 security/apparmor/include/apparmor.h |  4 ++--
 security/apparmor/lsm.c              | 18 +++++++++---------
 3 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/security/apparmor/file.c b/security/apparmor/file.c
index 7a828124..29e8c01e 100644
--- a/security/apparmor/file.c
+++ b/security/apparmor/file.c
@@ -620,7 +620,7 @@ int aa_file_perm(int op, struct aa_label *label, struct file *file,
 
 	/* TODO: label cross check */
 
-	if (file->f_path.mnt && path_mediated_fs(file_inode(file))) {
+	if (file->f_path.mnt && path_mediated_fs(file->f_path.dentry)) {
 		error = __file_path_perm(op, label, flabel, file, request,
 					 denied);
 
diff --git a/security/apparmor/include/apparmor.h b/security/apparmor/include/apparmor.h
index a59a3302..d26a56e9 100644
--- a/security/apparmor/include/apparmor.h
+++ b/security/apparmor/include/apparmor.h
@@ -135,9 +135,9 @@ static inline unsigned int aa_dfa_null_transition(struct aa_dfa *dfa,
 	return aa_dfa_next(dfa, start, 0);
 }
 
-static inline bool path_mediated_fs(struct inode *inode)
+static inline bool path_mediated_fs(struct dentry *dentry)
 {
-	return !(inode->i_sb->s_flags & MS_NOUSER);
+	return !(dentry->d_sb->s_flags & MS_NOUSER);
 }
 
 
diff --git a/security/apparmor/lsm.c b/security/apparmor/lsm.c
index 1b6a9492..f42955ee 100644
--- a/security/apparmor/lsm.c
+++ b/security/apparmor/lsm.c
@@ -272,7 +272,7 @@ static int common_perm_rm(int op, struct path *dir,
 	struct inode *inode = dentry->d_inode;
 	struct path_cond cond = { };
 
-	if (!inode || !dir->mnt || !path_mediated_fs(inode))
+	if (!inode || !dir->mnt || !path_mediated_fs(dentry))
 		return 0;
 
 	cond.uid = inode->i_uid;
@@ -296,7 +296,7 @@ static int common_perm_create(int op, struct path *dir, struct dentry *dentry,
 {
 	struct path_cond cond = { current_fsuid(), mode };
 
-	if (!dir->mnt || !path_mediated_fs(dir->dentry->d_inode))
+	if (!dir->mnt || !path_mediated_fs(dir->dentry))
 		return 0;
 
 	return common_perm_dir_dentry(op, dir, dentry, mask, &cond);
@@ -327,7 +327,7 @@ static int apparmor_path_mknod(struct path *dir, struct dentry *dentry,
 
 static int apparmor_path_truncate(struct path *path)
 {
-	if (!path->mnt || !path_mediated_fs(path->dentry->d_inode))
+	if (!path->mnt || !path_mediated_fs(path->dentry))
 		return 0;
 
 	return common_perm_cond(OP_TRUNC, path, MAY_WRITE | AA_MAY_SETATTR);
@@ -346,7 +346,7 @@ static int apparmor_path_link(struct dentry *old_dentry, struct path *new_dir,
 	struct aa_label *label;
 	int error = 0;
 
-	if (!path_mediated_fs(old_dentry->d_inode))
+	if (!path_mediated_fs(old_dentry))
 		return 0;
 
 	label = aa_current_label();
@@ -361,7 +361,7 @@ static int apparmor_path_rename(struct path *old_dir, struct dentry *old_dentry,
 	struct aa_label *label;
 	int error = 0;
 
-	if (!path_mediated_fs(old_dentry->d_inode))
+	if (!path_mediated_fs(old_dentry))
 		return 0;
 
 	label = aa_current_label();
@@ -387,7 +387,7 @@ static int apparmor_path_rename(struct path *old_dir, struct dentry *old_dentry,
 
 static int apparmor_path_chmod(struct path *path, umode_t mode)
 {
-	if (!path_mediated_fs(path->dentry->d_inode))
+	if (!path_mediated_fs(path->dentry))
 		return 0;
 
 	return common_perm_cond(OP_CHMOD, path, AA_MAY_CHMOD);
@@ -395,7 +395,7 @@ static int apparmor_path_chmod(struct path *path, umode_t mode)
 
 static int apparmor_path_chown(struct path *path, kuid_t uid, kgid_t gid)
 {
-	if (!path_mediated_fs(path->dentry->d_inode))
+	if (!path_mediated_fs(path->dentry))
 		return 0;
 
 	return common_perm_cond(OP_CHOWN, path, AA_MAY_CHOWN);
@@ -403,7 +403,7 @@ static int apparmor_path_chown(struct path *path, kuid_t uid, kgid_t gid)
 
 static int apparmor_inode_getattr(struct vfsmount *mnt, struct dentry *dentry)
 {
-	if (!path_mediated_fs(dentry->d_inode))
+	if (!path_mediated_fs(dentry))
 		return 0;
 
 	return common_perm_mnt_dentry(OP_GETATTR, mnt, dentry,
@@ -416,7 +416,7 @@ static int apparmor_file_open(struct file *file, const struct cred *cred)
 	struct aa_label *label;
 	int error = 0;
 
-	if (!path_mediated_fs(file_inode(file)))
+	if (!path_mediated_fs(file->f_path.dentry))
 		return 0;
 
 	/* If in exec, permission is handled by bprm hooks.
-- 
2.17.1

